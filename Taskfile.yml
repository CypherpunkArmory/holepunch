# https://taskfile.org
---
version: '2'

output: prefixed

tasks:
  setup_db:
    prefix: 'setup_db'
    desc: Setup Database
    cmds:
      - docker-compose exec db createdb -U postgres holepunch_development
      - docker-compose exec db createdb -U postgres holepunch_test
      - docker-compose exec web flask db upgrade

  setup_net:
    prefix: 'setup_net'
    desc: Setup the extra interface for Holepunch Nomad
    vars:
      LOOPBACK_ALIAS: 172.16.123.1
    cmds:
      - sudo ifconfig lo0 alias {{.LOOPBACK_ALIAS}}

  setup_tun:
    prefix: 'setup_tun'
    desc: Build a development SSH container and schedule it on the local nomad
    cmds:
      - docker build -f Dockerfile.ssh -t cypherpunkarmory/sshd:develop .
      - docker-compose up -d nomad
      - docker-compose run nomad job run /ssh.hcl

  clean_tunnels:
    prefix: 'clean'
    desc: Shutdown All Running Tunnels and Destroy Unreserved Subdomains
    cmds:
      - nomad job status | grep "ssh-client/dispatch" | cut -d ' ' -f1 | xargs -I '{}' sh -lc 'yes | nomad job stop --purge {}'
      - echo "delete from tunnel; delete from subdomain where reserved is false" | psql -U postgres -h 0.0.0.0 -d holepunch_development

  add_host:
    prefix: 'add_host'
    desc: Add a domain to your hosts file so you can test
    cmds:
      - (test -n "{{.DOMAIN}}") || (echo "DOMAIN is required"; exit 1)
      - sudo sh -lc 'echo "127.0.0.1	{{.DOMAIN}}" >> /private/etc/hosts'

  start_test_server:
    prefix: 'test_server'
    desc: Start the HTTPBIN test server on {{.LISTEN_PORT}}
    vars:
      LISTEN_PORT: 4000
    cmds:
      - "docker run -p {{.LISTEN_PORT}}:80 -e GUNICORN_CMD_ARGS=\"--capture-output --error-logfile - --access-logfile - --access-logformat '%(h)s %(t)s %(r)s %(s)s Host: %({Host}i)s}'\" kennethreitz/httpbin"

  release-ssh:
    prefix: 'release-ssh'
    desc: Release a new version of the SSH Container
    vars:
      VER: '{{ default "next" .VER }}'
      NEXT_TAG:
        sh: |
          if [ "{{.VER}}" = "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "ssh*" | awk -F'[.]' '{gsub("ssh-",""); print $1"."$2"."$3+1}';
          elif [ "{{.VER}}" != "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            echo "{{.VER}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
    cmds:
      - echo "Updating SSH from {{.RELEASED_TAG}} to {{.NEXT_TAG}}"
      - docker build -f Dockerfile.ssh -t cypherpunkarmory/sshd:{{.NEXT_TAG}} .
      - docker push cypherpunkarmory/sshd:{{.NEXT_TAG}}
      - if [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then git tag holepunch-{{.NEXT_TAG}}; git push origin holepunch-{{.NEXT_TAG}}; fi

  release:
    prefix: 'release'
    desc: Push a holepunch release to nomad.
    vars:
      VER: '{{ default "next" .VER }}'
      NEXT_TAG:
        sh: |
          if [ "{{.VER}}" = "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "holepunch*" | awk -F'[.]' '{gsub("holepunch-",""); print $1"."$2"."$3+1}';
          elif [ "{{.VER}}" != "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            echo "{{.VER}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
    cmds:
      - echo "Updating API from {{.RELEASED_TAG}} to {{.NEXT_TAG}}"
      - docker build --build-arg APP_NAME=holepunch -f Dockerfile.production -t cypherpunkarmory/holepunch-production:{{.NEXT_TAG}} .
      - docker push cypherpunkarmory/holepunch-production:{{.NEXT_TAG}}
      - if [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then git tag holepunch-{{.NEXT_TAG}}; git push origin holepunch-{{.NEXT_TAG}}; fi

  deploy:
    prefix: 'deploy'
    desc: Deploy the holepunch app
    dir: deploy
    vars:
      WORKSPACE: '{{ default "prod" .WORKSPACE }}'
      VER: '{{ default "next" .VER }}'
      ANSIBLE_VAULT_PATH:
        sh: echo $ANSIBLE_VAULT_PATH
      ROOT_TOKEN:
        sh: cat {{.ANSIBLE_VAULT_PATH}}/{{.WORKSPACE}}/vault_recovery | awk '/Initial Root Token:(.*?)/{print $4}'
      GIT_BRANCH:
        sh: git rev-parse --abbrev-ref HEAD
      HP_TAG:
        sh: |
          if [ "{{.VER}}" = "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "holepunch*" | awk -F'[.]' '{gsub("holepunch-",""); print $1"."$2"."$3+1}';
          elif [ "{{.VER}}" != "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            echo "{{.VER}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
      SSH_TAG:
        sh: |
          if [ "{{.VER}}" = "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "ssh*" | awk -F'[.]' '{gsub("ssh-",""); print $1"."$2"."$3+1}';
          elif [ "{{.VER}}" != "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            echo "{{.VER}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
    cmds:
      - (test -n "{{.ANSIBLE_VAULT_PATH}}") || (echo "ANSIBLE_VAULT_PATH must be set"; exit 1)
      - VAULT_ADDR=http://vault.service.city.consul:8200 vault login {{.ROOT_TOKEN}}
      - terraform plan -var "ssh_deploy_version={{.SSH_TAG}}" -var "holepunch_deploy_version={{.HP_TAG}}" -out "planfile"
      - echo "$(tput setaf 1)Waiting for cancellation. Ctrl-C now or forever hold your peace!$(tput sgr0)"
      - sleep 10
      - terraform apply "planfile"

