# https://taskfile.org
---
version: '2'

output: prefixed

tasks:
  setup_db:
    prefix: 'setup_db'
    desc: Setup Database
    cmds:
      - docker-compose stop db
      - docker-compose rm -f db
      - docker volume rm holepunch_postgres || :
      - docker-compose up -d db
      - sleep 1
      - docker-compose exec db createdb -U postgres holepunch_development
      - docker-compose exec db createdb -U postgres holepunch_test
      - docker-compose run web flask db upgrade

  setup_net:
    prefix: 'setup_net'
    desc: Setup the extra interface for Holepunch Nomad
    vars:
      LOOPBACK_ALIAS: 172.16.123.1
    cmds:
      - sudo ifconfig lo0 alias {{.LOOPBACK_ALIAS}}

  setup_tun:
    prefix: 'setup_tun'
    desc: Build a development SSH container and schedule it on the local nomad
    cmds:
      - docker build -f Dockerfile.ssh -t cypherpunkarmory/sshd:develop .
      - docker-compose up -d nomad
      - docker-compose run nomad job run /ssh.hcl

  clean_tunnels:
    prefix: 'clean'
    desc: Shutdown All Running Tunnels and Destroy Unreserved Subdomains
    cmds:
      - nomad job status | grep "ssh-client/dispatch" | cut -d ' ' -f1 | xargs -I '{}' sh -lc 'yes | nomad job stop --purge {}'
      - echo "delete from tunnel; delete from subdomain where reserved is false" | psql -U postgres -h 0.0.0.0 -d holepunch_development

  add_host:
    prefix: 'add_host'
    desc: Add a domain to your hosts file so you can test
    vars:
      DOMAIN: '{{ default "none" .DOMAIN }}'
    precondition:
      - sh: "[ '{{.DOMAIN}}' != 'none' ]"
        msg: "DOMAIN must be set"
    cmds:
      - sudo sh -lc 'echo "127.0.0.1	{{.DOMAIN}}" >> /private/etc/hosts'

  start_test_server:
    prefix: 'test_server'
    desc: Start the HTTPBIN test server on {{.LISTEN_PORT}}
    vars:
      LISTEN_PORT: 4000
    cmds:
      - "docker run -p {{.LISTEN_PORT}}:80 -e GUNICORN_CMD_ARGS=\"--capture-output --error-logfile - --access-logfile - --access-logformat '%(h)s %(t)s %(r)s %(s)s Host: %({Host}i)s}'\" kennethreitz/httpbin"

  release-ssh:
    prefix: 'release-ssh'
    desc: Push an SSH container release to Dockerhub
    vars:
      VER: '{{ default "next" .VER }}'
      RELEASED_TAG:
        sh: git describe --abbrev=0 --tags --match "ssh-*"
      NEXT_TAG:
        sh: |
          if [ "{{.VER}}" = "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "ssh*" | awk -F'[.]' '{gsub("ssh-",""); print $1"."$2"."$3+1}';
          elif [ "{{.VER}}" != "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            echo "{{.VER}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
    sources:
      - ./Dockerfile.ssh
    method: checksum
    precondition:
      - sh: git describe --abbrev=0 --tags --match "ssh-*"
        msg: "No tags matching ssh- found"
    status:
      - |
        if [ "$(git rev-parse --abbrev-ref HEAD)" == "master" ]; then
          test $(git describe --abbrev=0 --tags --match "ssh*")
        else
          exit 1
        fi
    cmds:
      - echo "Updating API from {{.RELEASED_TAG}} to ssh-{{.NEXT_TAG}}"
      - docker build -f Dockerfile.ssh -t cypherpunkarmory/sshd:{{.NEXT_TAG}} .
      - docker push cypherpunkarmory/sshd:{{.NEXT_TAG}}
      - |
        if [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
          git tag ssh-{{.NEXT_TAG}};
          git push origin ssh-{{.NEXT_TAG}};
        fi

  release:
    prefix: 'release'
    desc: Push a holepunch release to Dockerhub
    vars:
      VER: '{{ default "next" .VER }}'
      RELEASED_TAG:
        sh: git describe --abbrev=0 --tags --match "holepunch-*"
      NEXT_TAG:
        sh: |
          if [ "{{.VER}}" = "next" ] && [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "holepunch*" | awk -F'[.]' '{gsub("holepunch-",""); print $1"."$2"."$3+1}';
          elif [ "{{.VER}}" != "next" ]; then
            echo "{{.VER}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
      SOURCE_COMMIT:
        sh: git rev-parse HEAD
    sources:
      - app/**/*.py
      - migration/**/*.{py,ini,mako}
      - support/**/*.json
      - Pipfile
      - Pipfile.lock
      - Dockerfile.production
    method: checksum
    precondition:
      - sh: git describe --abbrev=0 --tags --match "holepunch-*"
        msg: "No tags matching holepunch- found"
    status:
      - |
        if [ "$(git rev-parse --abbrev-ref HEAD)" == "master" ]; then
          test $(git describe --abbrev=0 --tags --match "ssh*")
        else
          exit 1
        fi
    cmds:
      - echo "Updating API from {{.RELEASED_TAG}} to holepunch-{{.NEXT_TAG}}"
      - docker build --build-arg APP_NAME=holepunch --build-arg SOURCE_COMMIT={{.SOURCE_COMMIT}} -f Dockerfile.production -t cypherpunkarmory/holepunch-production:{{.NEXT_TAG}} .
      - docker push cypherpunkarmory/holepunch-production:{{.NEXT_TAG}}
      - |
        if [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
          git tag holepunch-{{.NEXT_TAG}};
          git push origin holepunch-{{.NEXT_TAG}};
        fi

  deploy:
    prefix: 'deploy'
    desc: Deploy the holepunch app
    dir: deploy
    deps:
      - release
      - release-ssh
    vars:
      ANSIBLE_VAULT_PATH:
        sh: echo $ANSIBLE_VAULT_PATH
      ROOT_TOKEN:
        sh: cat {{.ANSIBLE_VAULT_PATH}}/{{.WORKSPACE}}/vault_recovery | awk '/Initial Root Token:(.*?)/{print $4}'
      # If you are on master, grab the tag that points at master and deploy that
      # one - if you are on a branch - grab the tag with your branch name and
      # deploy that.
      HP_TAG:
        sh: |
          if [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "holepunch-*" | awk -F'[.]' '{gsub("holepunch-",""); print $1"."$2"."$3}'
          elif [ "{{.HP_TAG}}" != "<no value>" ]; then
            echo "{{.HP_TAG}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
      SSH_TAG:
        sh: |
          if [ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]; then
            git describe --abbrev=0 --tags --match "ssh-*" | awk -F'[.]' '{gsub("ssh-",""); print $1"."$2"."$3}'
          elif [ "{{.SSH_TAG}}" != "<no value>" ]; then
            echo "{{.SSH_TAG}}";
          else
            git rev-parse --abbrev-ref HEAD
          fi
    precondition:
      - sh: test -n "{{.ANSIBLE_VAULT_PATH}}"
        msg: "ANSIBLE_VAULT_PATH must be set"
      - sh: "[ '{{.WORKSPACE}}' != '<no value>' ]"
        msg: "WORKSPACE must be set"
      - sh: "[ \"$(nomad --version)\" = 'Nomad v0.8.7' ]"
      - sh: host vault.service.city.consul
        msg: "Could not reach vault, are you on the VPN?"
      - NOMAD_ADDR=http://nomad:4646 nomad status
    cmds:
      - VAULT_ADDR=http://vault.service.city.consul:8200 vault login {{.ROOT_TOKEN}}
      - terraform workspace select {{.WORKSPACE}}
      - terraform plan -var "ssh_deploy_version={{.SSH_TAG}}" -var "holepunch_deploy_version={{.HP_TAG}}" -out "planfile"
      - echo "$(tput setaf 1) Waiting for cancellation. Ctrl-C now or forever hold your peace!$(tput sgr0)"
      - sleep 10
      - terraform apply "planfile"
      - |
        deployment=$(nomad deployment list | grep "running" | awk '{ print $1 }')
        sgo="nogo"
        wgo="nogo"
        check_count=0
        while [ $sgo = "nogo" ] || [ $wgo = "nogo" ]; do
          echo "Waiting for deploy to green.  Service: $sgo,  Workers: $wgo Check: $check_count"
          sgo=$(nomad deployment status $deployment | grep "^services" | awk '{if($4==$7){print "go"}else{print "nogo"}}')
          wgo=$(nomad deployment status $deployment | grep "^workers" | awk '{if($4==$7){print "go"}else{print "nogo"}}')
          check_count=$((check_count+1))
          test $check_count -gt 160 && exit 1
          sleep 1
        done
        nomad deployment promote $deployment
